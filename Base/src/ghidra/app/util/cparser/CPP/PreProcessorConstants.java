/* Generated By:JavaCC: Do not edit this line. PreProcessorConstants.java */
package ghidra.app.util.cparser.CPP;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface PreProcessorConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int _CTRL = 1;
  /** RegularExpression Id. */
  int _XSYM = 2;
  /** RegularExpression Id. */
  int _LCMT = 3;
  /** RegularExpression Id. */
  int _CMT = 4;
  /** RegularExpression Id. */
  int _BLANKLINE = 5;
  /** RegularExpression Id. */
  int _LINECOMMENT = 6;
  /** RegularExpression Id. */
  int _COMMENT = 7;
  /** RegularExpression Id. */
  int _EQ = 8;
  /** RegularExpression Id. */
  int _NEQ = 9;
  /** RegularExpression Id. */
  int _LT = 10;
  /** RegularExpression Id. */
  int _GT = 11;
  /** RegularExpression Id. */
  int _LE = 12;
  /** RegularExpression Id. */
  int _GE = 13;
  /** RegularExpression Id. */
  int _AND = 14;
  /** RegularExpression Id. */
  int _LOG_AND = 15;
  /** RegularExpression Id. */
  int _OR = 16;
  /** RegularExpression Id. */
  int _LOG_OR = 17;
  /** RegularExpression Id. */
  int _LSH = 18;
  /** RegularExpression Id. */
  int _RSH = 19;
  /** RegularExpression Id. */
  int _MINUS = 20;
  /** RegularExpression Id. */
  int _PLUS = 21;
  /** RegularExpression Id. */
  int _QMARK = 22;
  /** RegularExpression Id. */
  int _COLON = 23;
  /** RegularExpression Id. */
  int DIR = 24;
  /** RegularExpression Id. */
  int XSYM = 25;
  /** RegularExpression Id. */
  int CMT = 26;
  /** RegularExpression Id. */
  int ECMT = 27;
  /** RegularExpression Id. */
  int ENDCMT = 28;
  /** RegularExpression Id. */
  int STARTCMT = 29;
  /** RegularExpression Id. */
  int COD = 30;
  /** RegularExpression Id. */
  int ENDL = 31;
  /** RegularExpression Id. */
  int UNDIR = 32;
  /** RegularExpression Id. */
  int UNDIRALL = 33;
  /** RegularExpression Id. */
  int DEFD = 34;
  /** RegularExpression Id. */
  int OPTD = 35;
  /** RegularExpression Id. */
  int ENDREL = 36;
  /** RegularExpression Id. */
  int CP = 37;
  /** RegularExpression Id. */
  int OP = 38;
  /** RegularExpression Id. */
  int NOPAR = 39;
  /** RegularExpression Id. */
  int WSP = 40;
  /** RegularExpression Id. */
  int STD = 41;
  /** RegularExpression Id. */
  int REL = 42;
  /** RegularExpression Id. */
  int NOTENDL = 43;
  /** RegularExpression Id. */
  int NOTENDLC = 44;
  /** RegularExpression Id. */
  int NOTENDLSTAR = 45;
  /** RegularExpression Id. */
  int NOTCMT = 46;
  /** RegularExpression Id. */
  int NOTCMTCOD = 47;
  /** RegularExpression Id. */
  int NOTWS = 48;
  /** RegularExpression Id. */
  int NOTWSQ = 49;
  /** RegularExpression Id. */
  int NOTWQC = 50;
  /** RegularExpression Id. */
  int NOTWWSQLT = 51;
  /** RegularExpression Id. */
  int NOTWSQLT = 52;
  /** RegularExpression Id. */
  int NOTVALCMT = 53;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 54;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 55;
  /** RegularExpression Id. */
  int HEX_LITERAL = 56;
  /** RegularExpression Id. */
  int HEX_DIGIT = 57;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 58;
  /** RegularExpression Id. */
  int FP_LITERAL = 59;
  /** RegularExpression Id. */
  int EXPONENT = 60;
  /** RegularExpression Id. */
  int NOTCHR = 61;
  /** RegularExpression Id. */
  int WS = 62;
  /** RegularExpression Id. */
  int OUTER_TEXT = 63;
  /** RegularExpression Id. */
  int NEWLINE = 64;
  /** RegularExpression Id. */
  int OTHER_TEXT = 65;
  /** RegularExpression Id. */
  int QUOTED_TEXT = 66;
  /** RegularExpression Id. */
  int DIRLINE = 77;
  /** RegularExpression Id. */
  int _WSP0 = 78;
  /** RegularExpression Id. */
  int _COD1 = 79;
  /** RegularExpression Id. */
  int _WSP2 = 80;
  /** RegularExpression Id. */
  int COMMA = 81;
  /** RegularExpression Id. */
  int _LCMT0 = 82;
  /** RegularExpression Id. */
  int EIFLINE = 83;
  /** RegularExpression Id. */
  int _CMT0 = 84;
  /** RegularExpression Id. */
  int IF = 85;
  /** RegularExpression Id. */
  int ELIF = 86;
  /** RegularExpression Id. */
  int ELSE = 87;
  /** RegularExpression Id. */
  int ENDIF = 88;
  /** RegularExpression Id. */
  int IFDEFED = 89;
  /** RegularExpression Id. */
  int IFNDEFED = 90;
  /** RegularExpression Id. */
  int NOT = 91;
  /** RegularExpression Id. */
  int DEFINED = 92;
  /** RegularExpression Id. */
  int HASINCLUDE = 93;
  /** RegularExpression Id. */
  int HASINCLUDENEXT = 94;
  /** RegularExpression Id. */
  int OPTIONED = 95;
  /** RegularExpression Id. */
  int EQ = 96;
  /** RegularExpression Id. */
  int NEQ = 97;
  /** RegularExpression Id. */
  int LT = 98;
  /** RegularExpression Id. */
  int GT = 99;
  /** RegularExpression Id. */
  int LE = 100;
  /** RegularExpression Id. */
  int GE = 101;
  /** RegularExpression Id. */
  int AND = 102;
  /** RegularExpression Id. */
  int OR = 103;
  /** RegularExpression Id. */
  int LOG_OR = 104;
  /** RegularExpression Id. */
  int LOG_AND = 105;
  /** RegularExpression Id. */
  int LSH = 106;
  /** RegularExpression Id. */
  int RSH = 107;
  /** RegularExpression Id. */
  int MINUS = 108;
  /** RegularExpression Id. */
  int PLUS = 109;
  /** RegularExpression Id. */
  int TIMES = 110;
  /** RegularExpression Id. */
  int QMARK = 111;
  /** RegularExpression Id. */
  int COLON = 112;
  /** RegularExpression Id. */
  int NUMERIC = 113;
  /** RegularExpression Id. */
  int FP_NUMERIC = 114;
  /** RegularExpression Id. */
  int ITEM = 115;
  /** RegularExpression Id. */
  int BEGITEM = 116;
  /** RegularExpression Id. */
  int ENDITEM = 117;
  /** RegularExpression Id. */
  int _TOEOL = 118;
  /** RegularExpression Id. */
  int _LCMT11 = 119;
  /** RegularExpression Id. */
  int _CMT11 = 120;
  /** RegularExpression Id. */
  int _INCCOD = 121;
  /** RegularExpression Id. */
  int _INCWSP = 122;
  /** RegularExpression Id. */
  int _INCCP = 123;
  /** RegularExpression Id. */
  int _INCOP = 124;
  /** RegularExpression Id. */
  int _INCSTANDARD = 125;
  /** RegularExpression Id. */
  int _HEX = 126;
  /** RegularExpression Id. */
  int _XSYMENDL = 127;
  /** RegularExpression Id. */
  int EXPATH = 128;
  /** RegularExpression Id. */
  int XSYMLINKPATH = 129;
  /** RegularExpression Id. */
  int INCLINE = 130;
  /** RegularExpression Id. */
  int MACEXPPATH = 131;
  /** RegularExpression Id. */
  int _COD = 132;
  /** RegularExpression Id. */
  int _WSP = 133;
  /** RegularExpression Id. */
  int __LT = 134;
  /** RegularExpression Id. */
  int _QTE = 135;
  /** RegularExpression Id. */
  int ESTD = 136;
  /** RegularExpression Id. */
  int STANDARD = 137;
  /** RegularExpression Id. */
  int _ENDREL = 138;
  /** RegularExpression Id. */
  int RELATIVE = 139;
  /** RegularExpression Id. */
  int PRAGMA_EXPRN = 140;
  /** RegularExpression Id. */
  int PRGLINE = 141;
  /** RegularExpression Id. */
  int _WSP1 = 142;
  /** RegularExpression Id. */
  int IFDEF_EXPRN = 143;
  /** RegularExpression Id. */
  int _LCMT20 = 144;
  /** RegularExpression Id. */
  int _WSP3 = 145;
  /** RegularExpression Id. */
  int IFDLINE = 146;
  /** RegularExpression Id. */
  int IFNDEF_EXPRN = 147;
  /** RegularExpression Id. */
  int _LCMT21 = 148;
  /** RegularExpression Id. */
  int _WSP4 = 149;
  /** RegularExpression Id. */
  int IFNDLINE = 150;
  /** RegularExpression Id. */
  int ERROR_EXPRN = 151;
  /** RegularExpression Id. */
  int ERRLINE = 152;
  /** RegularExpression Id. */
  int _WSP5 = 153;
  /** RegularExpression Id. */
  int WARNING_EXPRN = 154;
  /** RegularExpression Id. */
  int WARNLINE = 155;
  /** RegularExpression Id. */
  int _WSP6 = 156;
  /** RegularExpression Id. */
  int INFO_EXPRN = 157;
  /** RegularExpression Id. */
  int INFOLINE = 158;
  /** RegularExpression Id. */
  int _WSP_INFO = 159;
  /** RegularExpression Id. */
  int UNDLINE = 160;
  /** RegularExpression Id. */
  int _LEADIN1 = 161;
  /** RegularExpression Id. */
  int CONSTITUENT = 162;
  /** RegularExpression Id. */
  int _LEADIN2 = 163;
  /** RegularExpression Id. */
  int CONLINE = 166;
  /** RegularExpression Id. */
  int _WSP7 = 167;
  /** RegularExpression Id. */
  int _CODC = 168;
  /** RegularExpression Id. */
  int MANIFEST = 169;
  /** RegularExpression Id. */
  int LINLINE = 170;
  /** RegularExpression Id. */
  int LINEINFO = 171;
  /** RegularExpression Id. */
  int _ECMT3 = 172;
  /** RegularExpression Id. */
  int _CMT3 = 173;
  /** RegularExpression Id. */
  int _ECMT10 = 174;
  /** RegularExpression Id. */
  int _LCMT4 = 175;
  /** RegularExpression Id. */
  int _CMT4 = 176;
  /** RegularExpression Id. */
  int _QTE0 = 177;
  /** RegularExpression Id. */
  int _WSP8 = 178;
  /** RegularExpression Id. */
  int _COD2 = 179;
  /** RegularExpression Id. */
  int RVSLINE = 180;
  /** RegularExpression Id. */
  int VALUES = 181;
  /** RegularExpression Id. */
  int MOREVAL = 182;
  /** RegularExpression Id. */
  int _ECMT7 = 183;
  /** RegularExpression Id. */
  int _EECMT7 = 184;
  /** RegularExpression Id. */
  int _EQT = 185;
  /** RegularExpression Id. */
  int QUOTED_VALUE = 186;
  /** RegularExpression Id. */
  int MACROMV = 187;
  /** RegularExpression Id. */
  int _ECMT5 = 188;
  /** RegularExpression Id. */
  int _CMT5 = 189;
  /** RegularExpression Id. */
  int _MWSP = 190;
  /** RegularExpression Id. */
  int _EWSP = 191;
  /** RegularExpression Id. */
  int _COD3 = 192;
  /** RegularExpression Id. */
  int _MACWSP = 193;
  /** RegularExpression Id. */
  int MOREARG = 195;
  /** RegularExpression Id. */
  int MACRORV = 196;
  /** RegularExpression Id. */
  int _LCMT7 = 197;
  /** RegularExpression Id. */
  int _COD4 = 198;
  /** RegularExpression Id. */
  int _ECMT8 = 199;
  /** RegularExpression Id. */
  int _QTE1 = 200;
  /** RegularExpression Id. */
  int MCVLINE = 201;
  /** RegularExpression Id. */
  int LEADIN3 = 202;
  /** RegularExpression Id. */
  int _EQT1 = 203;
  /** RegularExpression Id. */
  int MQUOTED_VALUE = 204;
  /** RegularExpression Id. */
  int _ECMT9 = 205;
  /** RegularExpression Id. */
  int _EEECMT9 = 206;
  /** RegularExpression Id. */
  int _EECMT9 = 207;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int DIRECTIVE = 1;
  /** Lexical state. */
  int IGNORETOEOL = 2;
  /** Lexical state. */
  int INCDEF = 3;
  /** Lexical state. */
  int XSYMLINK = 4;
  /** Lexical state. */
  int XSYMPATH = 5;
  /** Lexical state. */
  int INCLUDE = 6;
  /** Lexical state. */
  int STDPATH = 7;
  /** Lexical state. */
  int RELPATH = 8;
  /** Lexical state. */
  int PRAGMA = 9;
  /** Lexical state. */
  int IFDEF = 10;
  /** Lexical state. */
  int IFNDEF = 11;
  /** Lexical state. */
  int ERROR = 12;
  /** Lexical state. */
  int WARNING = 13;
  /** Lexical state. */
  int INFO = 14;
  /** Lexical state. */
  int UNDEFINE = 15;
  /** Lexical state. */
  int DEFINE = 16;
  /** Lexical state. */
  int CONSTANT = 17;
  /** Lexical state. */
  int LINE = 18;
  /** Lexical state. */
  int COMMENT = 19;
  /** Lexical state. */
  int LINECOMMENT = 20;
  /** Lexical state. */
  int DIRECTIVECOMMENT = 21;
  /** Lexical state. */
  int RVALUES = 22;
  /** Lexical state. */
  int RVALUES_COMMENT = 23;
  /** Lexical state. */
  int QUOTED_VAL = 24;
  /** Lexical state. */
  int MACROARGS = 25;
  /** Lexical state. */
  int CONTARG = 26;
  /** Lexical state. */
  int MACROVALS = 27;
  /** Lexical state. */
  int MQUOTED_VAL = 28;
  /** Lexical state. */
  int MACROVALS_COMMENT = 29;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<_CTRL>",
    "<_XSYM>",
    "<_LCMT>",
    "<_CMT>",
    "<_BLANKLINE>",
    "<_LINECOMMENT>",
    "<_COMMENT>",
    "\"==\"",
    "\"!=\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"&&\"",
    "\"&\"",
    "\"||\"",
    "\"|\"",
    "\"<<\"",
    "\">>\"",
    "\"-\"",
    "\"+\"",
    "\"?\"",
    "\":\"",
    "\"#\"",
    "\"XSym\"",
    "\"/\"",
    "\"*\"",
    "\"*/\"",
    "\"/*\"",
    "<COD>",
    "<ENDL>",
    "<UNDIR>",
    "<UNDIRALL>",
    "\"defined\"",
    "\"__option\"",
    "\"\\\"\"",
    "\")\"",
    "\"(\"",
    "<NOPAR>",
    "<WSP>",
    "<STD>",
    "<REL>",
    "<NOTENDL>",
    "<NOTENDLC>",
    "<NOTENDLSTAR>",
    "<NOTCMT>",
    "<NOTCMTCOD>",
    "<NOTWS>",
    "<NOTWSQ>",
    "<NOTWQC>",
    "<NOTWWSQLT>",
    "<NOTWSQLT>",
    "\"/##/\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<HEX_DIGIT>",
    "<OCTAL_LITERAL>",
    "<FP_LITERAL>",
    "<EXPONENT>",
    "\"!\"",
    "<WS>",
    "<OUTER_TEXT>",
    "<NEWLINE>",
    "<OTHER_TEXT>",
    "<QUOTED_TEXT>",
    "\"include\"",
    "\"import\"",
    "\"include_next\"",
    "\"pragma\"",
    "\"error\"",
    "\"warning\"",
    "\"info\"",
    "\"define\"",
    "\"undef\"",
    "\"line\"",
    "<DIRLINE>",
    "<_WSP0>",
    "<_COD1>",
    "<_WSP2>",
    "\",\"",
    "<_LCMT0>",
    "<EIFLINE>",
    "<_CMT0>",
    "\"if\"",
    "\"elif\"",
    "\"else\"",
    "\"endif\"",
    "\"ifdef\"",
    "\"ifndef\"",
    "<NOT>",
    "<DEFINED>",
    "\"__has_include\"",
    "\"__has_include_next\"",
    "<OPTIONED>",
    "<EQ>",
    "<NEQ>",
    "<LT>",
    "<GT>",
    "<LE>",
    "<GE>",
    "<AND>",
    "<OR>",
    "<LOG_OR>",
    "<LOG_AND>",
    "<LSH>",
    "<RSH>",
    "<MINUS>",
    "<PLUS>",
    "<TIMES>",
    "<QMARK>",
    "<COLON>",
    "<NUMERIC>",
    "<FP_NUMERIC>",
    "<ITEM>",
    "<BEGITEM>",
    "<ENDITEM>",
    "<_TOEOL>",
    "<_LCMT11>",
    "<_CMT11>",
    "<_INCCOD>",
    "<_INCWSP>",
    "<_INCCP>",
    "<_INCOP>",
    "<_INCSTANDARD>",
    "<_HEX>",
    "<_XSYMENDL>",
    "<EXPATH>",
    "<XSYMLINKPATH>",
    "<INCLINE>",
    "<MACEXPPATH>",
    "<_COD>",
    "<_WSP>",
    "<__LT>",
    "<_QTE>",
    "<ESTD>",
    "<STANDARD>",
    "<_ENDREL>",
    "<RELATIVE>",
    "<PRAGMA_EXPRN>",
    "<PRGLINE>",
    "<_WSP1>",
    "<IFDEF_EXPRN>",
    "<_LCMT20>",
    "<_WSP3>",
    "<IFDLINE>",
    "<IFNDEF_EXPRN>",
    "<_LCMT21>",
    "<_WSP4>",
    "<IFNDLINE>",
    "<ERROR_EXPRN>",
    "<ERRLINE>",
    "<_WSP5>",
    "<WARNING_EXPRN>",
    "<WARNLINE>",
    "<_WSP6>",
    "<INFO_EXPRN>",
    "<INFOLINE>",
    "<_WSP_INFO>",
    "<UNDLINE>",
    "<_LEADIN1>",
    "<CONSTITUENT>",
    "<_LEADIN2>",
    "\"(\"",
    "\")\"",
    "<CONLINE>",
    "<_WSP7>",
    "<_CODC>",
    "<MANIFEST>",
    "<LINLINE>",
    "<LINEINFO>",
    "<_ECMT3>",
    "<_CMT3>",
    "<_ECMT10>",
    "<_LCMT4>",
    "<_CMT4>",
    "<_QTE0>",
    "<_WSP8>",
    "<_COD2>",
    "<RVSLINE>",
    "<VALUES>",
    "<MOREVAL>",
    "<_ECMT7>",
    "<_EECMT7>",
    "<_EQT>",
    "<QUOTED_VALUE>",
    "<MACROMV>",
    "<_ECMT5>",
    "<_CMT5>",
    "\",\"",
    "\")\"",
    "<_COD3>",
    "<_MACWSP>",
    "\")\"",
    "<MOREARG>",
    "<MACRORV>",
    "<_LCMT7>",
    "<_COD4>",
    "<_ECMT8>",
    "<_QTE1>",
    "<MCVLINE>",
    "<LEADIN3>",
    "<_EQT1>",
    "<MQUOTED_VALUE>",
    "<_ECMT9>",
    "<_EEECMT9>",
    "<_EECMT9>",
  };

}
