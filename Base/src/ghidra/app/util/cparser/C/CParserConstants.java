/* Generated By:JavaCC: Do not edit this line. CParserConstants.java */
package ghidra.app.util.cparser.C;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface CParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 9;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 10;
  /** RegularExpression Id. */
  int HEX_LITERAL = 11;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 12;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 13;
  /** RegularExpression Id. */
  int EXPONENT = 14;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 15;
  /** RegularExpression Id. */
  int STRING_LITERAL = 16;
  /** RegularExpression Id. */
  int CONTINUE = 17;
  /** RegularExpression Id. */
  int VOLATILE = 18;
  /** RegularExpression Id. */
  int REGISTER = 19;
  /** RegularExpression Id. */
  int UNSIGNED = 20;
  /** RegularExpression Id. */
  int TYPEDEF = 21;
  /** RegularExpression Id. */
  int DFLT = 22;
  /** RegularExpression Id. */
  int DOUBLE = 23;
  /** RegularExpression Id. */
  int SIZEOF = 24;
  /** RegularExpression Id. */
  int SWITCH = 25;
  /** RegularExpression Id. */
  int RETURN = 26;
  /** RegularExpression Id. */
  int EXTERN = 27;
  /** RegularExpression Id. */
  int QUOTE_C = 28;
  /** RegularExpression Id. */
  int STRUCT = 29;
  /** RegularExpression Id. */
  int STATIC = 30;
  /** RegularExpression Id. */
  int SIGNED = 31;
  /** RegularExpression Id. */
  int WHILE = 32;
  /** RegularExpression Id. */
  int BREAK = 33;
  /** RegularExpression Id. */
  int UNION = 34;
  /** RegularExpression Id. */
  int CONST = 35;
  /** RegularExpression Id. */
  int CDECL = 36;
  /** RegularExpression Id. */
  int DECLSPEC = 37;
  /** RegularExpression Id. */
  int PRAGMA = 38;
  /** RegularExpression Id. */
  int READABLETO = 39;
  /** RegularExpression Id. */
  int STDCALL = 40;
  /** RegularExpression Id. */
  int FASTCALL = 41;
  /** RegularExpression Id. */
  int ATTRIBUTE = 42;
  /** RegularExpression Id. */
  int EXTENSION = 43;
  /** RegularExpression Id. */
  int RESTRICT = 44;
  /** RegularExpression Id. */
  int ASM = 45;
  /** RegularExpression Id. */
  int INLINE = 46;
  /** RegularExpression Id. */
  int FLOAT = 47;
  /** RegularExpression Id. */
  int SHORT = 48;
  /** RegularExpression Id. */
  int ELSE = 49;
  /** RegularExpression Id. */
  int CASE = 50;
  /** RegularExpression Id. */
  int LONG = 51;
  /** RegularExpression Id. */
  int INT8 = 52;
  /** RegularExpression Id. */
  int INT16 = 53;
  /** RegularExpression Id. */
  int INT32 = 54;
  /** RegularExpression Id. */
  int INT64 = 55;
  /** RegularExpression Id. */
  int PTR64 = 56;
  /** RegularExpression Id. */
  int PTR32 = 57;
  /** RegularExpression Id. */
  int W64 = 58;
  /** RegularExpression Id. */
  int WCHAR = 59;
  /** RegularExpression Id. */
  int ENUM = 60;
  /** RegularExpression Id. */
  int AUTO = 61;
  /** RegularExpression Id. */
  int VOID = 62;
  /** RegularExpression Id. */
  int CHAR = 63;
  /** RegularExpression Id. */
  int GOTO = 64;
  /** RegularExpression Id. */
  int NEAR = 65;
  /** RegularExpression Id. */
  int FAR = 66;
  /** RegularExpression Id. */
  int FOR = 67;
  /** RegularExpression Id. */
  int INT = 68;
  /** RegularExpression Id. */
  int IF = 69;
  /** RegularExpression Id. */
  int DO = 70;
  /** RegularExpression Id. */
  int PROTOCOL = 71;
  /** RegularExpression Id. */
  int INTERFACE = 72;
  /** RegularExpression Id. */
  int LINE = 73;
  /** RegularExpression Id. */
  int LINEALT = 74;
  /** RegularExpression Id. */
  int IDENTIFIER = 75;
  /** RegularExpression Id. */
  int LETTER = 76;
  /** RegularExpression Id. */
  int DIGIT = 77;
  /** RegularExpression Id. */
  int ASMBLOCKB = 80;
  /** RegularExpression Id. */
  int ASMBLOCKP = 81;
  /** RegularExpression Id. */
  int ASM_SEMI = 82;
  /** RegularExpression Id. */
  int PATH_LITERAL = 87;
  /** RegularExpression Id. */
  int LINENUMBER_LITERAL = 88;
  /** RegularExpression Id. */
  int PIDENTIFIER = 97;
  /** RegularExpression Id. */
  int PLETTER = 98;
  /** RegularExpression Id. */
  int PDIGIT = 99;
  /** RegularExpression Id. */
  int POPEN = 100;
  /** RegularExpression Id. */
  int PCLOSE = 101;
  /** RegularExpression Id. */
  int PHASH = 102;
  /** RegularExpression Id. */
  int PCOLON = 103;
  /** RegularExpression Id. */
  int PCOMMA = 104;
  /** RegularExpression Id. */
  int PINTEGER_LITERAL = 105;
  /** RegularExpression Id. */
  int PDECIMAL_LITERAL = 106;
  /** RegularExpression Id. */
  int PHEX_LITERAL = 107;
  /** RegularExpression Id. */
  int POCTAL_LITERAL = 108;
  /** RegularExpression Id. */
  int PSTRING_LITERAL = 109;
  /** RegularExpression Id. */
  int OBJC_IGNORE = 115;
  /** RegularExpression Id. */
  int OBJC_IDENTIFIER = 116;
  /** RegularExpression Id. */
  int OBJC_LETTER = 117;
  /** RegularExpression Id. */
  int OBJC_DIGIT = 118;
  /** RegularExpression Id. */
  int OBJC_SEMI = 119;
  /** RegularExpression Id. */
  int OBJC2_IGNORE = 130;
  /** RegularExpression Id. */
  int OBJC2_END = 131;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int ASMBLOCK = 1;
  /** Lexical state. */
  int LINEBLOCK = 2;
  /** Lexical state. */
  int PRAGMALINE = 3;
  /** Lexical state. */
  int OBJC = 4;
  /** Lexical state. */
  int OBJC2 = 5;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\f\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\\\\"",
    "<token of kind 7>",
    "<token of kind 8>",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "\"continue\"",
    "<VOLATILE>",
    "\"register\"",
    "\"unsigned\"",
    "\"typedef\"",
    "\"default\"",
    "\"double\"",
    "\"sizeof\"",
    "\"switch\"",
    "\"return\"",
    "\"extern\"",
    "\"\\\"C\\\"\"",
    "\"struct\"",
    "\"static\"",
    "<SIGNED>",
    "\"while\"",
    "\"break\"",
    "\"union\"",
    "<CONST>",
    "<CDECL>",
    "\"__declspec\"",
    "<PRAGMA>",
    "\"__readableTo\"",
    "<STDCALL>",
    "<FASTCALL>",
    "<ATTRIBUTE>",
    "<EXTENSION>",
    "<RESTRICT>",
    "<ASM>",
    "<INLINE>",
    "\"float\"",
    "\"short\"",
    "\"else\"",
    "\"case\"",
    "\"long\"",
    "\"__int8\"",
    "\"__int16\"",
    "\"__int32\"",
    "\"__int64\"",
    "\"__ptr64\"",
    "\"__ptr32\"",
    "\"__w64\"",
    "\"wchar_t\"",
    "\"enum\"",
    "\"auto\"",
    "\"void\"",
    "\"char\"",
    "\"goto\"",
    "\"near\"",
    "\"far\"",
    "\"for\"",
    "\"int\"",
    "\"if\"",
    "\"do\"",
    "\"@protocol\"",
    "\"@interface\"",
    "\"#line\"",
    "<LINEALT>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\" \"",
    "\"\\t\"",
    "<ASMBLOCKB>",
    "<ASMBLOCKP>",
    "<ASM_SEMI>",
    "\" \"",
    "\"\\f\"",
    "\"\\t\"",
    "\":\"",
    "<PATH_LITERAL>",
    "<LINENUMBER_LITERAL>",
    "\" \"",
    "\"\\f\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\";\"",
    "<token of kind 95>",
    "<token of kind 96>",
    "<PIDENTIFIER>",
    "<PLETTER>",
    "<PDIGIT>",
    "\"(\"",
    "\")\"",
    "\"#\"",
    "\":\"",
    "\",\"",
    "<PINTEGER_LITERAL>",
    "<PDECIMAL_LITERAL>",
    "<PHEX_LITERAL>",
    "<POCTAL_LITERAL>",
    "<PSTRING_LITERAL>",
    "\" \"",
    "\"\\f\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<OBJC_IGNORE>",
    "<OBJC_IDENTIFIER>",
    "<OBJC_LETTER>",
    "<OBJC_DIGIT>",
    "<OBJC_SEMI>",
    "\" \"",
    "\"\\f\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"@private\"",
    "\"@protected\"",
    "\"@property\"",
    "\"@optional\"",
    "\"@required\"",
    "<OBJC2_IGNORE>",
    "\"@end\"",
    "\";\"",
    "\"(\"",
    "\")\"",
    "\",\"",
    "\":\"",
    "\"#\"",
    "\"{\"",
    "\"}\"",
    "\"=\"",
    "\"[\"",
    "\"]\"",
    "\"*\"",
    "\"&\"",
    "\"...\"",
    "\"+\"",
    "\"-\"",
    "\"*=\"",
    "\"/=\"",
    "\"%=\"",
    "\"+=\"",
    "\"-=\"",
    "\"<<=\"",
    "\">>=\"",
    "\"&=\"",
    "\"^=\"",
    "\"|=\"",
    "\"?\"",
    "\"||\"",
    "\"&&\"",
    "\"|\"",
    "\"^\"",
    "\"==\"",
    "\"!=\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"<<\"",
    "\">>\"",
    "\"/\"",
    "\"%\"",
    "\"++\"",
    "\"--\"",
    "\"~\"",
    "\"!\"",
    "\".\"",
    "\"->\"",
  };

}
