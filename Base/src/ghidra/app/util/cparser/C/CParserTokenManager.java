/* Generated By:JavaCC: Do not edit this line. CParserTokenManager.java */
package ghidra.app.util.cparser.C;
import ghidra.program.model.data.*;
import ghidra.program.model.data.Enum;
import ghidra.util.Msg;
import ghidra.util.InvalidNameException;
import ghidra.util.exception.DuplicateNameException;
import ghidra.util.exception.InvalidInputException;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.math.BigInteger;
import java.util.*;

/** Token Manager. */
public class CParserTokenManager implements CParserConstants
{
    static int parenNesting = 0;

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x10000000L) != 0L)
            return 192;
         if ((active2 & 0x80000200000L) != 0L)
            return 122;
         if ((active0 & 0x800000000000L) != 0L || (active1 & 0xcL) != 0L)
         {
            jjmatchedKind = 75;
            return 86;
         }
         if ((active0 & 0x7f000a000000000L) != 0L)
         {
            jjmatchedKind = 75;
            return 65;
         }
         if ((active1 & 0x200L) != 0L || (active2 & 0x200L) != 0L)
            return 193;
         if ((active0 & 0x1000063000000L) != 0L)
         {
            jjmatchedKind = 75;
            return 48;
         }
         if ((active0 & 0x8004000000020000L) != 0L)
         {
            jjmatchedKind = 75;
            return 53;
         }
         if ((active2 & 0x2000000020000L) != 0L)
            return 12;
         if ((active1 & 0x30L) != 0L)
         {
            jjmatchedKind = 75;
            return 76;
         }
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 75;
            return 69;
         }
         if ((active0 & 0x180a00070cf80000L) != 0L || (active1 & 0x43L) != 0L)
         {
            jjmatchedKind = 75;
            return 89;
         }
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 75;
            return 42;
         }
         return -1;
      case 1:
         if ((active0 & 0x10000000L) != 0L)
            return 192;
         if ((active1 & 0x8L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 75;
               jjmatchedPos = 1;
            }
            return 85;
         }
         if ((active0 & 0x7f000a000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 75;
               jjmatchedPos = 1;
            }
            return 64;
         }
         if ((active0 & 0x800000L) != 0L || (active1 & 0x60L) != 0L)
            return 89;
         if ((active0 & 0x1000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 75;
               jjmatchedPos = 1;
            }
            return 47;
         }
         if ((active0 & 0x20000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 75;
               jjmatchedPos = 1;
            }
            return 52;
         }
         if ((active0 & 0xb80f80076e780000L) != 0L || (active1 & 0x7L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 75;
               jjmatchedPos = 1;
            }
            return 89;
         }
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 75;
               jjmatchedPos = 1;
            }
            return 41;
         }
         if ((active1 & 0x10L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 75;
               jjmatchedPos = 1;
            }
            return 75;
         }
         return -1;
      case 2:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 2;
            return 186;
         }
         if ((active1 & 0x14L) != 0L)
            return 89;
         if ((active0 & 0xf0000000000000L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 2;
            return 76;
         }
         if ((active1 & 0x8L) != 0L)
            return 84;
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 2;
            return 51;
         }
         if ((active0 & 0x300000000000000L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 2;
            return 149;
         }
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 2;
            return -1;
         }
         if ((active0 & 0xfc0f80276ff80000L) != 0L || (active1 & 0x3L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 2;
            return 89;
         }
         return -1;
      case 3:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 3;
            return 185;
         }
         if ((active0 & 0xf0180276ffa0000L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 3;
            return 89;
         }
         if ((active0 & 0xf00e000000000000L) != 0L || (active1 & 0x3L) != 0L)
            return 89;
         if ((active0 & 0xf0000000000000L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 3;
            return 75;
         }
         return -1;
      case 4:
         if ((active0 & 0x401800700000000L) != 0L)
            return 89;
         if ((active0 & 0xbf000a06ffa0000L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 4;
            return 89;
         }
         return -1;
      case 5:
         if ((active0 & 0x1000006f800000L) != 0L)
            return 89;
         if ((active0 & 0xbe000a0007a0000L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 5;
            return 89;
         }
         return -1;
      case 6:
         if ((active0 & 0xbe0000000600000L) != 0L)
            return 89;
         if ((active0 & 0xa0001a0000L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 6;
            return 89;
         }
         return -1;
      case 7:
         if ((active0 & 0xa000000000L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 7;
            return 89;
         }
         if ((active0 & 0x1a0000L) != 0L)
            return 89;
         return -1;
      case 8:
         if ((active0 & 0xa000000000L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 8;
            return 89;
         }
         return -1;
      case 9:
         if ((active0 & 0x2000000000L) != 0L)
            return 89;
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 9;
            return 89;
         }
         return -1;
      case 10:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 10;
            return 89;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 176;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1000000000L);
      case 34:
         return jjMoveStringLiteralDfa1_0(0x10000000L, 0x0L, 0x0L);
      case 35:
         jjmatchedKind = 137;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200L, 0x0L);
      case 37:
         jjmatchedKind = 172;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x400000L);
      case 38:
         jjmatchedKind = 144;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x108000000L);
      case 40:
         return jjStopAtPos(0, 133);
      case 41:
         return jjStopAtPos(0, 134);
      case 42:
         jjmatchedKind = 143;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x100000L);
      case 43:
         jjmatchedKind = 146;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x200000800000L);
      case 44:
         return jjStopAtPos(0, 135);
      case 45:
         jjmatchedKind = 147;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x4400001000000L);
      case 46:
         jjmatchedKind = 177;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x20000L);
      case 47:
         jjmatchedKind = 171;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x200000L);
      case 58:
         return jjStopAtPos(0, 136);
      case 59:
         return jjStopAtPos(0, 132);
      case 60:
         jjmatchedKind = 165;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x28002000000L);
      case 61:
         jjmatchedKind = 140;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x800000000L);
      case 62:
         jjmatchedKind = 166;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x50004000000L);
      case 63:
         return jjStopAtPos(0, 158);
      case 64:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x180L, 0x0L);
      case 91:
         return jjStopAtPos(0, 141);
      case 93:
         return jjStopAtPos(0, 142);
      case 94:
         jjmatchedKind = 162;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x10000000L);
      case 95:
         return jjMoveStringLiteralDfa1_0(0x7f000a000000000L, 0x0L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x0L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x200000000L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x8004000000020000L, 0x0L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0xc00000L, 0x40L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x1002000008000000L, 0x0L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x800000000000L, 0xcL, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x30L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x8000000000000L, 0x0L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x4080000L, 0x0L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x1000063000000L, 0x0L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x200000L, 0x0L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x400100000L, 0x0L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x0L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x800000100000000L, 0x0L, 0x0L);
      case 123:
         return jjStopAtPos(0, 138);
      case 124:
         jjmatchedKind = 161;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xa0000000L);
      case 125:
         return jjStopAtPos(0, 139);
      case 126:
         return jjStopAtPos(0, 175);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active2 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 160);
         break;
      case 43:
         if ((active2 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 173);
         break;
      case 45:
         if ((active2 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 174);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x20000L);
      case 60:
         if ((active2 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 169;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x2000000L);
      case 61:
         if ((active2 & 0x100000L) != 0L)
            return jjStopAtPos(1, 148);
         else if ((active2 & 0x200000L) != 0L)
            return jjStopAtPos(1, 149);
         else if ((active2 & 0x400000L) != 0L)
            return jjStopAtPos(1, 150);
         else if ((active2 & 0x800000L) != 0L)
            return jjStopAtPos(1, 151);
         else if ((active2 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 152);
         else if ((active2 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 155);
         else if ((active2 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 156);
         else if ((active2 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 157);
         else if ((active2 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 163);
         else if ((active2 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 164);
         else if ((active2 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 167);
         else if ((active2 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 168);
         break;
      case 62:
         if ((active2 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 170;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 178);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x4000000L);
      case 67:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L, active1, 0L, active2, 0L);
      case 95:
         return jjMoveStringLiteralDfa2_0(active0, 0x7f000a000000000L, active1, 0L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000L, active1, 0x4L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x4480000L, active1, 0x2L, active2, 0L);
      case 102:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(1, 69, 89);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x8001000100000000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L, active1, 0x100L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x2800000000000L, active1, 0x200L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000400100000L, active1, 0x10L, active2, 0L);
      case 111:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x4008000000820000L, active1, 0x9L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000L, active1, 0L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x60000000L, active1, 0L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000000L, active1, 0L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000L, active1, 0L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L, active1, 0L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000L, active1, 0L, active2, 0L);
      case 124:
         if ((active2 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 159);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 34:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(2, 16);
         break;
      case 46:
         if ((active2 & 0x20000L) != 0L)
            return jjStopAtPos(2, 145);
         break;
      case 61:
         if ((active2 & 0x2000000L) != 0L)
            return jjStopAtPos(2, 153);
         else if ((active2 & 0x4000000L) != 0L)
            return jjStopAtPos(2, 154);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000040000000L, active1, 0x2L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L, active1, 0L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L, active1, 0L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L, active1, 0L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L, active1, 0L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x40f0000502000000L, active1, 0x200L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000020000L, active1, 0x100L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x1800000000000L, active1, 0L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x300000000200000L, active1, 0L, active2, 0L);
      case 114:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(2, 66, 89);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(2, 67, 84);
         return jjMoveStringLiteralDfa3_0(active0, 0x8020000000L, active1, 0x80L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x6000000100000L, active1, 0L, active2, 0L);
      case 116:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(2, 68, 89);
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000c000000L, active1, 0x1L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000800000L, active1, 0L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L, active1, 0L, active2, 0L);
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 54:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x800800200400000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L, active1, 0L);
      case 100:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 62, 89);
         break;
      case 101:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 49, 89);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 50, 89);
         return jjMoveStringLiteralDfa4_0(active0, 0xa009200000L, active1, 0L);
      case 103:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 51, 89);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x180000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L, active1, 0L);
      case 109:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 60, 89);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0xf0000000000000L, active1, 0x200L);
      case 111:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 61, 89);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(3, 64, 89);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L, active1, 0x80L);
      case 114:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 63, 89);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 65, 89);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x300000042020000L, active1, 0x100L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x24000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 52:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 58, 89);
         break;
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x2022000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L, active1, 0L);
      case 101:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 32, 89);
         else if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(4, 73);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x40020000L, active1, 0L);
      case 107:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 33, 89);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L, active1, 0L);
      case 110:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 34, 89);
         break;
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0xb0000000c000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000L, active1, 0L);
      case 116:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 47, 89);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 48, 89);
         return jjMoveStringLiteralDfa5_0(active0, 0xf0000000000000L, active1, 0x80L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 49:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000000L, active1, 0L);
      case 51:
         return jjMoveStringLiteralDfa6_0(active0, 0x240000000000000L, active1, 0L);
      case 54:
         return jjMoveStringLiteralDfa6_0(active0, 0x180000000000000L, active1, 0L);
      case 56:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 52, 89);
         break;
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000000L, active1, 0L);
      case 99:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 30, 89);
         break;
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 23, 89);
         return jjMoveStringLiteralDfa6_0(active0, 0x200000L, active1, 0L);
      case 102:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 24, 89);
         break;
      case 104:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 25, 89);
         break;
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000400000L, active1, 0L);
      case 110:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 26, 89);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 27, 89);
         return jjMoveStringLiteralDfa6_0(active0, 0x120000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100L);
      case 116:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 29, 89);
         return jjMoveStringLiteralDfa6_0(active0, 0x80000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 50:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 54, 89);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 57, 89);
         break;
      case 52:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 55, 89);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 56, 89);
         break;
      case 54:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 53, 89);
         break;
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x180000L, active1, 0L);
      case 102:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(6, 21, 89);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100L);
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 22, 89);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 59, 89);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100L);
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000L, active1, 0L);
      case 100:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(7, 20, 89);
         break;
      case 101:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(7, 17, 89);
         break;
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80L);
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(7, 19, 89);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x100L);
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000L, active1, 0L);
      case 108:
         if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(8, 71);
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 99:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 37, 89);
         break;
      case 101:
         if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(9, 72);
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 111:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 39, 89);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 192;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 149:
               case 89:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAdd(89);
                  break;
               case 85:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAdd(89);
                  break;
               case 76:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAdd(89);
                  break;
               case 185:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAdd(89);
                  break;
               case 48:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAdd(89);
                  break;
               case 52:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAdd(89);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  else if (curChar == 35)
                     jjCheckNAddTwoStates(150, 191);
                  else if (curChar == 47)
                     jjAddStates(7, 8);
                  else if (curChar == 36)
                  {
                     if (kind > 75)
                        kind = 75;
                     jjCheckNAdd(89);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(9, 11);
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(18, 19);
                  else if (curChar == 46)
                     jjCheckNAdd(12);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 9)
                        kind = 9;
                     jjCheckNAddStates(12, 17);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 9)
                        kind = 9;
                     jjCheckNAddStates(18, 24);
                  }
                  break;
               case 193:
               case 191:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 74)
                     kind = 74;
                  jjCheckNAdd(191);
                  break;
               case 41:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAdd(89);
                  break;
               case 122:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(128, 129);
                  else if (curChar == 47)
                     jjCheckNAddStates(25, 27);
                  break;
               case 86:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAdd(89);
                  break;
               case 84:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAdd(89);
                  break;
               case 192:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(9, 11);
                  else if (curChar == 34)
                  {
                     if (kind > 16)
                        kind = 16;
                  }
                  break;
               case 69:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAdd(89);
                  break;
               case 75:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAdd(89);
                  break;
               case 186:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAdd(89);
                  break;
               case 65:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAdd(89);
                  break;
               case 64:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAdd(89);
                  break;
               case 47:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAdd(89);
                  break;
               case 53:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAdd(89);
                  break;
               case 51:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAdd(89);
                  break;
               case 42:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAdd(89);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAddStates(12, 17);
                  break;
               case 11:
                  if (curChar == 46)
                     jjCheckNAdd(12);
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddStates(28, 30);
                  break;
               case 14:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddTwoStates(15, 16);
                  break;
               case 17:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(18, 19);
                  break;
               case 18:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddStates(31, 33);
                  break;
               case 20:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(31, 33);
                  break;
               case 21:
                  if (curChar == 39 && kind > 15)
                     kind = 15;
                  break;
               case 22:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(34, 37);
                  break;
               case 23:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(31, 33);
                  break;
               case 24:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 25:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(23);
                  break;
               case 26:
                  if (curChar == 34)
                     jjCheckNAddStates(9, 11);
                  break;
               case 27:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(9, 11);
                  break;
               case 29:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(9, 11);
                  break;
               case 30:
                  if (curChar == 34 && kind > 16)
                     kind = 16;
                  break;
               case 31:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(38, 41);
                  break;
               case 32:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(9, 11);
                  break;
               case 33:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 34:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(32);
                  break;
               case 88:
                  if (curChar != 36)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAdd(89);
                  break;
               case 90:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  break;
               case 91:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(91, 92);
                  break;
               case 92:
                  if (curChar != 46)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddStates(42, 44);
                  break;
               case 93:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddStates(42, 44);
                  break;
               case 95:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(96);
                  break;
               case 96:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddTwoStates(96, 16);
                  break;
               case 97:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(97, 98);
                  break;
               case 99:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(100);
                  break;
               case 100:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddTwoStates(100, 16);
                  break;
               case 101:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(45, 47);
                  break;
               case 103:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(104);
                  break;
               case 104:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(104, 16);
                  break;
               case 105:
                  if (curChar != 48)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAddStates(18, 24);
                  break;
               case 107:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAddStates(48, 53);
                  break;
               case 114:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAddStates(54, 59);
                  break;
               case 121:
                  if (curChar == 47)
                     jjAddStates(7, 8);
                  break;
               case 123:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(25, 27);
                  break;
               case 124:
                  if ((0x2400L & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 125:
                  if (curChar == 10 && kind > 7)
                     kind = 7;
                  break;
               case 126:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 127:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(128, 129);
                  break;
               case 128:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(128, 129);
                  break;
               case 129:
                  if (curChar == 42)
                     jjCheckNAddStates(60, 62);
                  break;
               case 130:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(131, 129);
                  break;
               case 131:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(131, 129);
                  break;
               case 132:
                  if (curChar == 47 && kind > 8)
                     kind = 8;
                  break;
               case 190:
                  if (curChar == 35)
                     jjCheckNAddTwoStates(150, 191);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 149:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 75)
                        kind = 75;
                     jjCheckNAdd(89);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 85:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 75)
                        kind = 75;
                     jjCheckNAdd(89);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 76:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 75)
                        kind = 75;
                     jjCheckNAdd(89);
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 185:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 75)
                        kind = 75;
                     jjCheckNAdd(89);
                  }
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 184;
                  break;
               case 48:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 75)
                        kind = 75;
                     jjCheckNAdd(89);
                  }
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 52:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 75)
                        kind = 75;
                     jjCheckNAdd(89);
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 75)
                        kind = 75;
                     jjCheckNAdd(89);
                  }
                  if (curChar == 95)
                     jjCheckNAddStates(63, 85);
                  else if (curChar == 76)
                     jjAddStates(86, 87);
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 86;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 76;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 69;
                  else if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 53;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 48;
                  else if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 42;
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 193:
               case 150:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               case 41:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 75)
                        kind = 75;
                     jjCheckNAdd(89);
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 86:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 75)
                        kind = 75;
                     jjCheckNAdd(89);
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 84:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 75)
                        kind = 75;
                     jjCheckNAdd(89);
                  }
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 192:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(9, 11);
                  else if (curChar == 92)
                     jjAddStates(88, 90);
                  break;
               case 69:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 75)
                        kind = 75;
                     jjCheckNAdd(89);
                  }
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 75:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 75)
                        kind = 75;
                     jjCheckNAdd(89);
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 186:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 75)
                        kind = 75;
                     jjCheckNAdd(89);
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 185;
                  break;
               case 65:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 75)
                        kind = 75;
                     jjCheckNAdd(89);
                  }
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 86;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 76;
                  else if (curChar == 95)
                     jjCheckNAddStates(91, 93);
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 69;
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 186;
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 177;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 157;
                  else if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 149;
                  else if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 142;
                  else if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 42;
                  if (curChar == 95)
                     jjCheckNAddTwoStates(188, 70);
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 166;
                  else if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 53;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 48;
                  if (curChar == 95)
                     jjCheckNAddTwoStates(179, 187);
                  if (curChar == 95)
                     jjCheckNAddTwoStates(168, 178);
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 64;
                  if (curChar == 95)
                     jjCheckNAddTwoStates(159, 167);
                  if (curChar == 95)
                     jjCheckNAddTwoStates(151, 158);
                  if (curChar == 95)
                     jjCheckNAddTwoStates(144, 150);
                  if (curChar == 95)
                     jjCheckNAddTwoStates(138, 143);
                  if (curChar == 95)
                     jjCheckNAddTwoStates(137, 54);
                  if (curChar == 95)
                     jjCheckNAddTwoStates(136, 49);
                  if (curChar == 95)
                     jjCheckNAddTwoStates(135, 43);
                  break;
               case 64:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 75)
                        kind = 75;
                     jjCheckNAdd(89);
                  }
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 86;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 76;
                  else if (curChar == 95)
                     jjCheckNAddStates(91, 93);
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 69;
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 186;
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 177;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 157;
                  else if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 149;
                  else if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 142;
                  else if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 42;
                  if (curChar == 95)
                     jjCheckNAddTwoStates(188, 70);
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 63;
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 166;
                  else if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 53;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 48;
                  if (curChar == 95)
                     jjCheckNAddTwoStates(179, 187);
                  if (curChar == 95)
                     jjCheckNAddTwoStates(168, 178);
                  if (curChar == 95)
                     jjCheckNAddTwoStates(159, 167);
                  if (curChar == 95)
                     jjCheckNAddTwoStates(151, 158);
                  if (curChar == 95)
                     jjCheckNAddTwoStates(144, 150);
                  if (curChar == 95)
                     jjCheckNAddTwoStates(138, 143);
                  if (curChar == 95)
                     jjCheckNAddTwoStates(137, 54);
                  if (curChar == 95)
                     jjCheckNAddTwoStates(136, 49);
                  if (curChar == 95)
                     jjCheckNAddTwoStates(135, 43);
                  break;
               case 47:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 75)
                        kind = 75;
                     jjCheckNAdd(89);
                  }
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 53:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 75)
                        kind = 75;
                     jjCheckNAdd(89);
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 51:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 75)
                        kind = 75;
                     jjCheckNAdd(89);
                  }
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 42:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 75)
                        kind = 75;
                     jjCheckNAdd(89);
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 2:
                  if (curChar == 108 && kind > 9)
                     kind = 9;
                  break;
               case 3:
               case 8:
               case 108:
               case 111:
               case 115:
               case 118:
                  if (curChar == 108)
                     jjCheckNAdd(2);
                  break;
               case 4:
                  if (curChar == 76 && kind > 9)
                     kind = 9;
                  break;
               case 5:
               case 10:
               case 109:
               case 113:
               case 116:
               case 120:
                  if (curChar == 76)
                     jjCheckNAdd(4);
                  break;
               case 6:
                  if ((0x20100000201000L & l) != 0L && kind > 9)
                     kind = 9;
                  break;
               case 7:
                  if (curChar == 117)
                     jjCheckNAddTwoStates(8, 2);
                  break;
               case 9:
                  if (curChar == 85)
                     jjCheckNAddTwoStates(10, 4);
                  break;
               case 13:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(94, 95);
                  break;
               case 16:
                  if ((0x5000000050L & l) != 0L && kind > 13)
                     kind = 13;
                  break;
               case 18:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(31, 33);
                  break;
               case 19:
                  if (curChar == 92)
                     jjAddStates(96, 98);
                  break;
               case 20:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(31, 33);
                  break;
               case 27:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(9, 11);
                  break;
               case 28:
                  if (curChar == 92)
                     jjAddStates(88, 90);
                  break;
               case 29:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(9, 11);
                  break;
               case 35:
                  if (curChar != 101)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAdd(36);
                  break;
               case 36:
                  if (curChar != 95)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAdd(36);
                  break;
               case 37:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 38:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 43:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if (curChar == 100 && kind > 31)
                     kind = 31;
                  break;
               case 45:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 49:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 116 && kind > 35)
                     kind = 35;
                  break;
               case 54:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar != 101)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAdd(56);
                  break;
               case 56:
                  if (curChar != 95)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAdd(56);
                  break;
               case 57:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 58:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 66:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 67:
                  if (curChar != 109)
                     break;
                  if (kind > 45)
                     kind = 45;
                  jjCheckNAdd(68);
                  break;
               case 68:
                  if (curChar != 95)
                     break;
                  if (kind > 45)
                     kind = 45;
                  jjCheckNAdd(68);
                  break;
               case 70:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if (curChar != 101)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(72);
                  break;
               case 72:
                  if (curChar != 95)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(72);
                  break;
               case 73:
               case 78:
                  if (curChar == 110)
                     jjCheckNAdd(71);
                  break;
               case 74:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 77:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 79:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 87:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAdd(89);
                  break;
               case 89:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAdd(89);
                  break;
               case 94:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(99, 100);
                  break;
               case 98:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(101, 102);
                  break;
               case 102:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(103, 104);
                  break;
               case 106:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(107);
                  break;
               case 107:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAddStates(48, 53);
                  break;
               case 110:
                  if (curChar == 117)
                     jjCheckNAddTwoStates(111, 2);
                  break;
               case 112:
                  if (curChar == 85)
                     jjCheckNAddTwoStates(113, 4);
                  break;
               case 117:
                  if (curChar == 117)
                     jjCheckNAddTwoStates(118, 2);
                  break;
               case 119:
                  if (curChar == 85)
                     jjCheckNAddTwoStates(120, 4);
                  break;
               case 123:
                  jjAddStates(25, 27);
                  break;
               case 128:
                  jjCheckNAddTwoStates(128, 129);
                  break;
               case 130:
               case 131:
                  jjCheckNAddTwoStates(131, 129);
                  break;
               case 133:
                  if (curChar == 76)
                     jjAddStates(86, 87);
                  break;
               case 134:
                  if (curChar == 95)
                     jjCheckNAddStates(63, 85);
                  break;
               case 135:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(135, 43);
                  break;
               case 136:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(136, 49);
                  break;
               case 137:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(137, 54);
                  break;
               case 138:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(138, 143);
                  break;
               case 139:
                  if (curChar == 108 && kind > 36)
                     kind = 36;
                  break;
               case 140:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 139;
                  break;
               case 141:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 142:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 141;
                  break;
               case 143:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 142;
                  break;
               case 144:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(144, 150);
                  break;
               case 145:
                  if (curChar == 97 && kind > 38)
                     kind = 38;
                  break;
               case 146:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 145;
                  break;
               case 147:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 146;
                  break;
               case 148:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 147;
                  break;
               case 151:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(151, 158);
                  break;
               case 152:
                  if (curChar == 108 && kind > 40)
                     kind = 40;
                  break;
               case 153:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 152;
                  break;
               case 154:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 153;
                  break;
               case 155:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 154;
                  break;
               case 156:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 155;
                  break;
               case 157:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 156;
                  break;
               case 158:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 157;
                  break;
               case 159:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(159, 167);
                  break;
               case 160:
                  if (curChar == 108 && kind > 41)
                     kind = 41;
                  break;
               case 161:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 160;
                  break;
               case 162:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 161;
                  break;
               case 163:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 162;
                  break;
               case 164:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 163;
                  break;
               case 165:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 164;
                  break;
               case 166:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 165;
                  break;
               case 167:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 166;
                  break;
               case 168:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(168, 178);
                  break;
               case 169:
                  if (curChar != 110)
                     break;
                  if (kind > 43)
                     kind = 43;
                  jjCheckNAdd(170);
                  break;
               case 170:
                  if (curChar != 95)
                     break;
                  if (kind > 43)
                     kind = 43;
                  jjCheckNAdd(170);
                  break;
               case 171:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 169;
                  break;
               case 172:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 171;
                  break;
               case 173:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 172;
                  break;
               case 174:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 173;
                  break;
               case 175:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 174;
                  break;
               case 176:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 175;
                  break;
               case 177:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 176;
                  break;
               case 178:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 177;
                  break;
               case 179:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(179, 187);
                  break;
               case 180:
                  if (curChar == 116 && kind > 44)
                     kind = 44;
                  break;
               case 181:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 180;
                  break;
               case 182:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 181;
                  break;
               case 183:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 182;
                  break;
               case 184:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 183;
                  break;
               case 187:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 186;
                  break;
               case 188:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(188, 70);
                  break;
               case 189:
                  if (curChar == 95)
                     jjCheckNAddStates(91, 93);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 192:
               case 27:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(9, 11);
                  break;
               case 18:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(31, 33);
                  break;
               case 123:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(25, 27);
                  break;
               case 128:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(128, 129);
                  break;
               case 130:
               case 131:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(131, 129);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 192 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0, long active1)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 9:
         return jjStartNfaWithStates_1(0, 79, 5);
      case 32:
         return jjStartNfaWithStates_1(0, 78, 5);
      default :
         return jjMoveNfa_1(4, 0);
   }
}
private int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 5;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((0xf7ffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(0, 1);
                  else if (curChar == 59)
                  {
                     if (kind > 82)
                        kind = 82;
                  }
                  if ((0xf7fffcffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 5:
                  if ((0xf7ffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(0, 1);
                  if ((0xf7fffcffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(2, 3);
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAdd(3);
                  }
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 80)
                        kind = 80;
                     jjCheckNAdd(1);
                  }
                  break;
               case 0:
                  if ((0xf7ffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(0, 1);
                  break;
               case 1:
                  if ((0x2400L & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if ((0xf7fffcffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 3:
                  if ((0x2400L & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAdd(3);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  jjCheckNAddTwoStates(2, 3);
                  if ((0xd7ffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(0, 1);
                  break;
               case 5:
                  jjCheckNAddTwoStates(2, 3);
                  if ((0xd7ffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(0, 1);
                  break;
               case 0:
                  if ((0xd7ffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(0, 1);
                  break;
               case 2:
                  jjCheckNAddTwoStates(2, 3);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(0, 1);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 5:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(0, 1);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(0, 1);
                  break;
               case 2:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 5 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0, long active1)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      default :
         return jjMoveNfa_2(0, 0);
   }
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 5;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 88)
                        kind = 88;
                     jjCheckNAdd(4);
                  }
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 1:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if (curChar == 34 && kind > 87)
                     kind = 87;
                  break;
               case 3:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAdd(4);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  jjAddStates(105, 106);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(105, 106);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 5 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_5(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_5(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_5(jjStopStringLiteralDfa_5(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 122);
      case 10:
         return jjStopAtPos(0, 123);
      case 12:
         return jjStopAtPos(0, 121);
      case 13:
         return jjStopAtPos(0, 124);
      case 32:
         return jjStopAtPos(0, 120);
      case 64:
         return jjMoveStringLiteralDfa1_5(0xe000000000000000L, 0xbL);
      default :
         return jjMoveNfa_5(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_5(long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(0, 0L, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa2_5(active1, 0L, active2, 0x8L);
      case 111:
         return jjMoveStringLiteralDfa2_5(active1, 0L, active2, 0x1L);
      case 112:
         return jjMoveStringLiteralDfa2_5(active1, 0xe000000000000000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_5(active1, 0L, active2, 0x2L);
      default :
         break;
   }
   return jjStartNfa_5(0, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa2_5(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_5(0, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(1, 0L, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa3_5(active1, 0L, active2, 0x2L);
      case 110:
         return jjMoveStringLiteralDfa3_5(active1, 0L, active2, 0x8L);
      case 112:
         return jjMoveStringLiteralDfa3_5(active1, 0L, active2, 0x1L);
      case 114:
         return jjMoveStringLiteralDfa3_5(active1, 0xe000000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_5(1, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa3_5(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_5(1, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(2, 0L, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 100:
         if ((active2 & 0x8L) != 0L)
            return jjStopAtPos(3, 131);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_5(active1, 0x2000000000000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_5(active1, 0xc000000000000000L, active2, 0L);
      case 113:
         return jjMoveStringLiteralDfa4_5(active1, 0L, active2, 0x2L);
      case 116:
         return jjMoveStringLiteralDfa4_5(active1, 0L, active2, 0x1L);
      default :
         break;
   }
   return jjStartNfa_5(2, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa4_5(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_5(2, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(3, 0L, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa5_5(active1, 0L, active2, 0x1L);
      case 112:
         return jjMoveStringLiteralDfa5_5(active1, 0x8000000000000000L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa5_5(active1, 0x4000000000000000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_5(active1, 0L, active2, 0x2L);
      case 118:
         return jjMoveStringLiteralDfa5_5(active1, 0x2000000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_5(3, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa5_5(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_5(3, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(4, 0L, active1, active2);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_5(active1, 0x2000000000000000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa6_5(active1, 0xc000000000000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa6_5(active1, 0L, active2, 0x2L);
      case 111:
         return jjMoveStringLiteralDfa6_5(active1, 0L, active2, 0x1L);
      default :
         break;
   }
   return jjStartNfa_5(4, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa6_5(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_5(4, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(5, 0L, active1, active2);
      return 6;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa7_5(active1, 0x4000000000000000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa7_5(active1, 0L, active2, 0x1L);
      case 114:
         return jjMoveStringLiteralDfa7_5(active1, 0x8000000000000000L, active2, 0x2L);
      case 116:
         return jjMoveStringLiteralDfa7_5(active1, 0x2000000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_5(5, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa7_5(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_5(5, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(6, 0L, active1, active2);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_5(active1, 0L, active2, 0x1L);
      case 101:
         if ((active1 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(7, 125);
         return jjMoveStringLiteralDfa8_5(active1, 0L, active2, 0x2L);
      case 116:
         return jjMoveStringLiteralDfa8_5(active1, 0xc000000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_5(6, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa8_5(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_5(6, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(7, 0L, active1, active2);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active2 & 0x2L) != 0L)
            return jjStopAtPos(8, 129);
         break;
      case 101:
         return jjMoveStringLiteralDfa9_5(active1, 0x4000000000000000L, active2, 0L);
      case 108:
         if ((active2 & 0x1L) != 0L)
            return jjStopAtPos(8, 128);
         break;
      case 121:
         if ((active1 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(8, 127);
         break;
      default :
         break;
   }
   return jjStartNfa_5(7, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa9_5(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_5(7, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(8, 0L, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 100:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(9, 126);
         break;
      default :
         break;
   }
   return jjStartNfa_5(8, 0L, active1, 0L);
}
private int jjMoveNfa_5(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 130;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffffffffffeL & l) != 0L)
                     kind = 130;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 130)
                     kind = 130;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_4(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_4(int pos, long active0, long active1)
{
   return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 112);
      case 10:
         return jjStopAtPos(0, 113);
      case 12:
         return jjStopAtPos(0, 111);
      case 13:
         return jjStopAtPos(0, 114);
      case 32:
         return jjStopAtPos(0, 110);
      default :
         return jjMoveNfa_4(0, 0);
   }
}
private int jjMoveNfa_4(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xf400ffefffffffffL & l) != 0L)
                  {
                     if (kind > 115)
                        kind = 115;
                  }
                  else if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAdd(1);
                  }
                  else if (curChar == 59)
                  {
                     if (kind > 119)
                        kind = 119;
                  }
                  break;
               case 1:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  kind = 116;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if (curChar == 59)
                     kind = 119;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAdd(1);
                  }
                  else if ((0xf800000178000000L & l) != 0L)
                  {
                     if (kind > 115)
                        kind = 115;
                  }
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  kind = 116;
                  jjCheckNAdd(1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 115)
                     kind = 115;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_3(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0, long active1)
{
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 92);
      case 13:
         return jjStopAtPos(0, 93);
      case 35:
         return jjStopAtPos(0, 102);
      case 40:
         return jjStopAtPos(0, 100);
      case 41:
         return jjStopAtPos(0, 101);
      case 44:
         return jjStopAtPos(0, 104);
      case 58:
         return jjStopAtPos(0, 103);
      case 59:
         return jjStopAtPos(0, 94);
      default :
         return jjMoveNfa_3(0, 0);
   }
}
private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 48;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 105)
                        kind = 105;
                     jjCheckNAddStates(107, 112);
                  }
                  else if (curChar == 47)
                     jjAddStates(113, 114);
                  else if (curChar == 48)
                  {
                     if (kind > 105)
                        kind = 105;
                     jjCheckNAddStates(115, 121);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(122, 124);
                  else if (curChar == 36)
                  {
                     if (kind > 97)
                        kind = 97;
                     jjCheckNAdd(1);
                  }
                  break;
               case 1:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 97)
                     kind = 97;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 105)
                     kind = 105;
                  jjCheckNAddStates(107, 112);
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 105)
                     kind = 105;
                  jjCheckNAddStates(107, 112);
                  break;
               case 14:
                  if (curChar == 34)
                     jjCheckNAddStates(122, 124);
                  break;
               case 15:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(122, 124);
                  break;
               case 17:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(122, 124);
                  break;
               case 18:
                  if (curChar == 34 && kind > 109)
                     kind = 109;
                  break;
               case 19:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(125, 128);
                  break;
               case 20:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(122, 124);
                  break;
               case 21:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 22:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(20);
                  break;
               case 23:
                  if (curChar != 48)
                     break;
                  if (kind > 105)
                     kind = 105;
                  jjCheckNAddStates(115, 121);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 105)
                     kind = 105;
                  jjCheckNAddStates(129, 134);
                  break;
               case 32:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 105)
                     kind = 105;
                  jjCheckNAddStates(135, 140);
                  break;
               case 39:
                  if (curChar == 47)
                     jjAddStates(113, 114);
                  break;
               case 40:
                  if (curChar != 47)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAdd(41);
                  break;
               case 41:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAdd(41);
                  break;
               case 42:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(43, 44);
                  break;
               case 43:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(43, 44);
                  break;
               case 44:
                  if (curChar == 42)
                     jjCheckNAddStates(141, 143);
                  break;
               case 45:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(46, 44);
                  break;
               case 46:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(46, 44);
                  break;
               case 47:
                  if (curChar == 47 && kind > 96)
                     kind = 96;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 97)
                        kind = 97;
                     jjCheckNAdd(1);
                  }
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 97)
                     kind = 97;
                  jjCheckNAdd(1);
                  break;
               case 4:
                  if (curChar == 108 && kind > 105)
                     kind = 105;
                  break;
               case 5:
               case 10:
               case 26:
               case 29:
               case 33:
               case 36:
                  if (curChar == 108)
                     jjCheckNAdd(4);
                  break;
               case 6:
                  if (curChar == 76 && kind > 105)
                     kind = 105;
                  break;
               case 7:
               case 12:
               case 27:
               case 31:
               case 34:
               case 38:
                  if (curChar == 76)
                     jjCheckNAdd(6);
                  break;
               case 8:
                  if ((0x20100000201000L & l) != 0L && kind > 105)
                     kind = 105;
                  break;
               case 9:
                  if (curChar == 117)
                     jjCheckNAddTwoStates(10, 4);
                  break;
               case 11:
                  if (curChar == 85)
                     jjCheckNAddTwoStates(12, 6);
                  break;
               case 13:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 15:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(122, 124);
                  break;
               case 16:
                  if (curChar == 92)
                     jjAddStates(144, 146);
                  break;
               case 17:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(122, 124);
                  break;
               case 24:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(25);
                  break;
               case 25:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 105)
                     kind = 105;
                  jjCheckNAddStates(129, 134);
                  break;
               case 28:
                  if (curChar == 117)
                     jjCheckNAddTwoStates(29, 4);
                  break;
               case 30:
                  if (curChar == 85)
                     jjCheckNAddTwoStates(31, 6);
                  break;
               case 35:
                  if (curChar == 117)
                     jjCheckNAddTwoStates(36, 4);
                  break;
               case 37:
                  if (curChar == 85)
                     jjCheckNAddTwoStates(38, 6);
                  break;
               case 41:
                  if (kind > 95)
                     kind = 95;
                  jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  jjCheckNAddTwoStates(43, 44);
                  break;
               case 45:
               case 46:
                  jjCheckNAddTwoStates(46, 44);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 15:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(122, 124);
                  break;
               case 41:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(43, 44);
                  break;
               case 45:
               case 46:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(46, 44);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 48 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   91, 92, 97, 98, 101, 102, 16, 122, 127, 27, 28, 30, 1, 3, 5, 6, 
   7, 9, 106, 114, 115, 116, 6, 117, 119, 123, 124, 126, 12, 13, 16, 18, 
   19, 21, 18, 19, 23, 21, 27, 28, 32, 30, 93, 94, 16, 101, 102, 16, 
   107, 108, 109, 6, 110, 112, 114, 115, 116, 6, 117, 119, 129, 130, 132, 135, 
   43, 136, 49, 137, 54, 138, 143, 144, 150, 151, 158, 159, 167, 168, 178, 179, 
   187, 188, 70, 189, 77, 87, 17, 26, 29, 31, 33, 189, 77, 87, 14, 15, 
   20, 22, 24, 95, 96, 99, 100, 103, 104, 1, 2, 3, 5, 7, 8, 9, 
   11, 40, 42, 24, 32, 33, 34, 8, 35, 37, 15, 16, 18, 15, 16, 20, 
   18, 25, 26, 27, 8, 28, 30, 32, 33, 34, 8, 35, 37, 44, 45, 47, 
   17, 19, 21, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, "\143\157\156\164\151\156\165\145", null, 
"\162\145\147\151\163\164\145\162", "\165\156\163\151\147\156\145\144", "\164\171\160\145\144\145\146", 
"\144\145\146\141\165\154\164", "\144\157\165\142\154\145", "\163\151\172\145\157\146", 
"\163\167\151\164\143\150", "\162\145\164\165\162\156", "\145\170\164\145\162\156", "\42\103\42", 
"\163\164\162\165\143\164", "\163\164\141\164\151\143", null, "\167\150\151\154\145", 
"\142\162\145\141\153", "\165\156\151\157\156", null, null, 
"\137\137\144\145\143\154\163\160\145\143", null, "\137\137\162\145\141\144\141\142\154\145\124\157", null, null, null, 
null, null, null, null, "\146\154\157\141\164", "\163\150\157\162\164", 
"\145\154\163\145", "\143\141\163\145", "\154\157\156\147", "\137\137\151\156\164\70", 
"\137\137\151\156\164\61\66", "\137\137\151\156\164\63\62", "\137\137\151\156\164\66\64", 
"\137\137\160\164\162\66\64", "\137\137\160\164\162\63\62", "\137\137\167\66\64", 
"\167\143\150\141\162\137\164", "\145\156\165\155", "\141\165\164\157", "\166\157\151\144", 
"\143\150\141\162", "\147\157\164\157", "\156\145\141\162", "\146\141\162", "\146\157\162", 
"\151\156\164", "\151\146", "\144\157", "\100\160\162\157\164\157\143\157\154", 
"\100\151\156\164\145\162\146\141\143\145", "\43\154\151\156\145", null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, "\50", "\51", "\43", "\72", "\54", null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, "\100\145\156\144", "\73", "\50", "\51", 
"\54", "\72", "\43", "\173", "\175", "\75", "\133", "\135", "\52", "\46", 
"\56\56\56", "\53", "\55", "\52\75", "\57\75", "\45\75", "\53\75", "\55\75", "\74\74\75", 
"\76\76\75", "\46\75", "\136\75", "\174\75", "\77", "\174\174", "\46\46", "\174", "\136", 
"\75\75", "\41\75", "\74", "\76", "\74\75", "\76\75", "\74\74", "\76\76", "\57", "\45", 
"\53\53", "\55\55", "\176", "\41", "\56", "\55\76", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "ASMBLOCK",
   "LINEBLOCK",
   "PRAGMALINE",
   "OBJC",
   "OBJC2",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 4, 2, 2, 
   -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, 0, -1, -1, -1, -1, 0, 0, 0, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 5, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffa201L, 0x9823f201870fffL, 0x7fffffffffffcL, 
};
static final long[] jjtoSkip = {
   0x1feL, 0xff07c001fe78c000L, 0x3L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[192];
private final int[] jjstateSet = new int[384];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public CParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public CParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 192; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 6 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while ((curChar < 64 && (0x100003600L & (1L << curChar)) != 0L) || 
                 (curChar >> 6) == 1 && (0x10000000L & (1L << (curChar & 077))) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
     case 2:
       try { input_stream.backup(0);
          while (curChar <= 58 && (0x400000100001200L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       break;
     case 3:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100001200L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_3();
       break;
     case 4:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_4();
       break;
     case 5:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_5();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 100 :
        image.append(jjstrLiteralImages[100]);
        lengthOfMatch = jjstrLiteralImages[100].length();
                        parenNesting++;
         break;
      case 101 :
        image.append(jjstrLiteralImages[101]);
        lengthOfMatch = jjstrLiteralImages[101].length();
                         parenNesting--; if (parenNesting == 0) SwitchTo(DEFAULT);
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
